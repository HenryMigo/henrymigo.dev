@page "/repos"
@using Octokit
@using Microsoft.Extensions.Logging

<h3>Repos</h3>

@if (!_isLoading && _gitHubRepos.Count != 0)
{
    <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 g-4">
        @foreach (var repo in _gitHubRepos)
        {
            <div class="col">
                <div class="card text-dark bg-light mb-3 h-100 d-flex flex-column">
                    <div class="card-body">
                        <h5 class="card-title">@repo.Name</h5>
                        <p class="card-text">@repo.Description</p>
                    </div>
                    <div class="card-footer">
                        <a id="GitButton" href="@repo.HtmlUrl" class="btn btn-primary mt-auto" target="_blank">Go to repo</a>
                    </div>
                </div>
            </div>
        }
    </div>
}

@if (!_isLoading && _gitHubRepos.Count == 0)
{
    <div class="w-100 d-flex justify-content-center align-items-center">
        <strong style="margin-left: 5px;">No repositories found...</strong>
    </div>
}

@if (_isLoading)
{
    <div class="w-100 d-flex justify-content-center align-items-center">
        <div class="spinner-border" style="width: 3rem; height: 3rem;" role="status">
            <span class="visually-hidden">Loading Repo's</span>
        </div>
        <strong style="margin-left: 5px;">Loading...</strong>
    </div>
}

@inject ILogger<Repos> _logger;
@code {
    private IReadOnlyList<Repository> _gitHubRepos = new List<Repository>();
    private bool _isLoading = true;
    
    /// <summary>
    /// On initialisation of page get git repos.
    /// </summary>
    /// <exception cref="Exception">Catch exception, log and set _gitHubRepos to empty list</exception>
    /// <exception cref="Exception">Catch exception, log and set _gitHubRepos to empty list</exception>
    protected override async Task OnInitializedAsync()
    {
        try
        {
            var client = new GitHubClient(new ProductHeaderValue("HenryMigo.dev"))
            {
                Credentials = new Credentials("token", AuthenticationType.Anonymous)
            };

            var repos = await client.Repository.GetAllForUser("HenryMigo");
            _gitHubRepos = repos ?? new List<Repository>();
            _isLoading = false;
        }
        catch (Exception exception)
        {
            _isLoading = false;
            _logger.LogError(exception, "Failed to get git repositories");
        }
    }
}
